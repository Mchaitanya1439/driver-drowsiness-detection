from scipy.spatial import distance
from imutils import face_utils
from pygame import mixer
import imutils
import dlib
import cv2

mixer.init()
mixer.music.load(r"C:\Users\HAI\Downloads\music.wav")

def eye_aspect_ratio(eye):
    A = distance.euclidean(eye[1], eye[5])
    B = distance.euclidean(eye[2], eye[4])
    C = distance.euclidean(eye[0], eye[3])
    ear = (A + B) / (2.0 * C)
    return ear

def mouth_aspect_ratio(mouth):
    A = distance.euclidean(mouth[14], mouth[18])
    B = distance.euclidean(mouth[12], mouth[16])
    C = distance.euclidean(mouth[0], mouth[6])
    mar = (A + B) / (2.0 * C)
    return mar

thresh_eye = 0.25
frame_check_eye = 20

thresh_mouth = 0.5
frame_check_mouth = 10

drowsiness_levels = ['Alert', 'Slightly Drowsy', 'Moderately Drowsy', 'Very Drowsy', 'Dangerously Drowsy']

detect = dlib.get_frontal_face_detector()
predict = dlib.shape_predictor(r"C:\Users\HAI\Downloads\shape_predictor_68_face_landmarks.dat")

(lStart, lEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["left_eye"]
(rStart, rEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["right_eye"]
(mStart, mEnd) = face_utils.FACIAL_LANDMARKS_IDXS["mouth"]

flag_eye = 0
flag_mouth = 0

cap=cv2.VideoCapture(0)

total_frames = 0
correct_predictions = 0

while True:
    ret, frame=cap.read()
    frame = imutils.resize(frame, width=450)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    subjects = detect(gray, 0)
    
    drowsiness_level = 0
    
    for subject in subjects:
        shape = predict(gray, subject)
        shape = face_utils.shape_to_np(shape)
        
        leftEye = shape[lStart:lEnd]
        rightEye = shape[rStart:rEnd]
        leftEAR = eye_aspect_ratio(leftEye)
        rightEAR = eye_aspect_ratio(rightEye)
        ear = (leftEAR + rightEAR) / 2.0
        
        leftEyeHull = cv2.convexHull(leftEye)
        rightEyeHull = cv2.convexHull(rightEye)
        cv2.drawContours(frame, [leftEyeHull], -1, (0, 255, 0), 1)
        cv2.drawContours(frame, [rightEyeHull], -1, (0, 255, 0), 1)
        
        if ear < thresh_eye:
            flag_eye += 1
            if flag_eye >= frame_check_eye:
                drowsiness_level += 1
                mixer.music.play()
        else:
            flag_eye = 0
    
        mouths = shape[mStart:mEnd]
        mar = mouth_aspect_ratio(mouths)
        mouthHull = cv2.convexHull(mouths)
        cv2.drawContours(frame, [mouthHull], -1, (0, 255, 0), 1)
        
        if mar > thresh_mouth:
            flag_mouth += 1
            if flag_mouth >= frame_check_mouth:
                cv2.putText(frame, "Yawn Detected!", (10, 60),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                drowsiness_level += 1
        else:
            flag_mouth = 0
    
    drowsiness_level = min(drowsiness_level, 4)
    if drowsiness_levels[drowsiness_level] == 'Alert':
        correct_predictions += 1

    total_frames += 1
    accuracy = (correct_predictions / total_frames) * 100

    cv2.putText(frame, "Drowsiness Level: " + drowsiness_levels[drowsiness_level], (10, 90),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
    cv2.putText(frame, "Accuracy: {:.2f}%".format(accuracy), (10, 120),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

    cv2.imshow(r"C:\Users\HAI\Pictures\Camera Roll\WIN_20240213_13_48_49_Pro.mp4", frame)
    key = cv2.waitKey(1) & 0xFF
    if key == ord("q"):
        break

cv2.destroyAllWindows()
cap.release()